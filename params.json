{"name":"Angular.berlin.js","tagline":"Materials for angularJs presentation for berlin.js","body":"### AngularJs\r\n## apps.berlin.js 28 II February 2013\r\n\r\n### Who am I?\r\n* Marcin Wosinak\r\n* 5 years experience in IT\r\n  * WebDev: Javascript\r\n  * C# dev: UnitTests\r\n* Currently js contractor in Poznań, Poland\r\n\r\n### Who are you?\r\n\r\n* Who was already working with angular?\r\n* Who likes having unit tests?\r\n* Who is using yeoman?\r\n* Who is going to ask questions?\r\n\r\n### What is AngularJs\r\n\r\n* it's application framework\r\n* it's 29KB compressed and minified\r\n * backbone is 19KB (with underscore & backbone)\r\n * backbone is 32KB (with lodash & jQuery)\r\n * ember is 49KB\r\n* no dependencies:\r\n * can use jQuery if available on loadtime\r\n\r\n### AngularJs Overview\r\n* MVVM [G+] [1]\r\n* Plain js object\r\n* Dependency injection\r\n* TESTABILITY!\r\n* Directives\r\n* Declarative programming\r\n\r\n### MVVM architecture\r\n* plain js models\r\n* dirty checking - but object.observer is comming\r\n\r\n```js\r\nfunction TodoCtrl($scope, $log) {\r\n  // use console log\r\n  $log.log('Test');\r\n\r\n  $scope.addTodo = function() {\r\n    $scope.todos.push({text:$scope.todoText, done:false});\r\n    $scope.todoText = '';\r\n  };\r\n \r\n  $scope.remaining = function() {\r\n    var count = 0;\r\n    angular.forEach($scope.todos, function(todo) {\r\n      count += todo.done ? 0 : 1;\r\n    });\r\n    return count;\r\n  };\r\n \r\n  $scope.archive = function() {\r\n    var oldTodos = $scope.todos;\r\n    $scope.todos = [];\r\n    angular.forEach(oldTodos, function(todo) {\r\n      if (!todo.done) $scope.todos.push(todo);\r\n    });\r\n  };\r\n}\r\n```\r\n\r\n### Dependency injection\r\n* increase testablity\r\n* nice sumarize interconnections between parts of aplication\r\n```js\r\n$scope; // view model\r\n$log; // console: ie friendly\r\n$window; // testable window counter part\r\n$http; // http requests\r\n// and all our services\r\n```\r\n\r\n### Directives\r\n* tools to teach html new tricks\r\n * binding controller\r\n\r\n```html\r\n<div ng-controller=\"ProductCtrl\">\r\n```\r\n\r\n * loops\r\n\r\n```html\r\n<ul>\r\n  <li ng-repeat=\"friend in friends\">\r\n    [{{$index + 1}}] {{friend.name}} who is {{friend.age}} yrs old.\r\n </li>\r\n</ul>\r\n```\r\n\r\n * binding models\r\n\r\n```html\r\n<input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\"\r\n```\r\n\r\n* or bing back old ones\r\n\r\n```html\r\n<blink>Click me</blink>\r\n```\r\n\r\n* No dom manipulation in controler!\r\n\r\n### Declarative programming\r\n* What we have in html, css now is in js as well\r\n* html: want paragraph?\r\n\r\n```html\r\n<p>Text</p>\r\n```\r\n\r\n* css: want it red?\r\n\r\n```css\r\np { color: red}\r\n```\r\n\r\n* js: what it bind to model - we are writing in pure html\r\n\r\n```html\r\n<p>{{modelData}}</p>\r\n```\r\n\r\n### TESABILITY!\r\n* Dependency injection\r\n* Directives\r\n* simple plain old js objects as models\r\n\r\n```js\r\n//Code:\r\nfunction PasswordCtrl($scope) {\r\n  $scope.password = '';\r\n  $scope.grade = function() {\r\n    var size = $scope.password.length;\r\n    if (size > 8) {\r\n      $scope.strength = 'strong';\r\n    }\r\n    else if (size > 3) {\r\n      $scope.strength = 'medium';\r\n    }\r\n    else {\r\n      $scope.strength = 'weak';\r\n    }\r\n  };\r\n}\r\n\r\n// test:\r\nvar scope = {};\r\n\r\nvar pc = new PasswordCtrl(scope);\r\npc.password('abc');\r\npc.grade();\r\nexpect(scope.strength).toEqual('weak');\r\n```\r\n\r\n### Doubt\r\n* for some even deal breakers\r\n\r\n### html validator are going to hate it\r\n* those tags are invalide\r\n\r\n```html\r\n<tabs>\r\n   <pane title=\"Localization\">\r\n```\r\n\r\n* those atributs are invalide\r\n\r\n```html\r\n<li ng-repeat=\"todo in todos\">\r\n<input type=\"text\" ng-model=\"todoText\" />\r\n```\r\n\r\n* and this little guy was purpouse fully removed from html\r\n\r\n```html\r\n<blink>CLICK ME!</blink>\r\n```\r\n\r\n### Back to 90's?\r\n* angular uses proprietery tags, allow us to create own, and expect us to write stuff like this:\r\n\r\n```html\r\n<form ng-submit=\"addTodo()\">\r\n<button ng-click=\"fireAlert()\">\r\n```\r\n\r\n### No - it's our future\r\n* web components\r\n* shadow dom \r\n\r\nWill be native apis. Now we can get some of benefits with angular.\r\nAll is safly separeted into scopes.\r\n\r\n### Shadow DOM\r\n* Used by browsers internally to create controls\r\n* Will expose the same featres to web devs\r\n* In working draft http://www.w3.org/TR/shadow-dom/\r\n* Nice overview http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/ \r\n\r\n### Yeoman\r\n* CLI\r\n* cool tool to creating code\r\n* push changes form server to broswer - no refreshing\r\n\r\n### How to start with angular?\r\n* Is possible to use in legacy projects\r\n* Goes well allong with jquery\r\n* There is a project to rewrite bootstrap js to angular directives [angular-ui-bootstrap] [2]\r\n* They say it is possible to use it along with require.js [angular-require-js] [3]\r\n\r\n### How to catch me\r\n* marcin.wosinek@gmail.com\r\n* \\#marcin.wosinek\r\n* write up and links:\r\n* http://marcin-wosinek.github.com/angular.berlin.js\r\n\r\n[1]: https://plus.google.com/+AngularJS/posts/aZNVhj355G2   \"G+\"\r\n[2]: http://angular-ui.github.com/bootstrap/   \"angular-ui-bootstrap\"\r\n[3]: https://github.com/elsom25/angular-requirejs-html5boilerplate-seed   \"angular-require-js\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}